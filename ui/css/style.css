@import "icons.css";

button::after.icon-circle {
  background: var(--color-fg);
  mask: var(--circle) center center / 100% auto no-repeat;

  content: "";
  display: block;
  /* height: 1rem; */
  /* width: 1rem; */
}

@font-face {
  font-family: "Soria";
  src: url("/apps/maat/soria.ttf") format("truetype");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}

body {
  position: relative;
}

h1 {
  font-family: "Soria";
  color: var(--color-primary);
  text-align: center;
  text-transform: capitalize;
  font-weight: 600;
}

blockquote {
  text-align: center;
  padding-inline-start: 0;
  max-width: initial;
}

/* h2 { */
/*   font-family: "Soria"; */
/*   font-weight: normal; */
/*   text-transform: none; */
/* } */

.inline_form,
form.inline {
  display: inline-block;

  /* > input { */
  /* border: none; */
  /* } */
}

header {
  position: relative;
  z-index: 2;
}

header > nav ul li svg {
  display: inline-block;
  padding: 0.1rem 1rem;
  vertical-align: middle;
}

header > .header-icon {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
}

.svg-ico {
  /* margin-top: var(--vspace--1); */
  display: inline;
  vertical-align: middle;
  height: 4em;
  /* margin-bottom: var(--vspace-2); */
  /* height: 2em; */
  /* width: 2em; */
}

/**/
/* .inline-input { */
/*   color: var(--fg); */
/*   background: var(--bg); */
/*   inline-size: fit-content; */
/*   display: inline-block; */
/*   border: none; */
/*   padding: 0; */
/*   margin: 0; */
/**/
/*   ::placeholder { */
/*     color: var(--fg); */
/*   } */
/* } */

/* body { */
/*     max-width: calc(1.3 * var(--max-width)); */
/* } */

/* TODO: make a class to not apply it to every list */
main > ul {
  padding: 0;
}

main > ul > li {
  list-style-type: none;

  &:active {
    /* give list item a "pressed" feel */
    transform: scale(0.975);
    border-color: var(--color-primary);
  }

  &:hover {
    /* transform: scale(1.05); */
    /* border: 1px solid #f90; */
    /* font-weight: bold; */
    cursor: pointer;
  }
}

/* li::marker { */
/*   content: "○ "; */
/* } */

/* li:hover::marker { */
/*   content: "⦻ "; */
/* } */

/* .done > * > li::marker { */
/*   content: "⦻ "; */
/* } */

/* .done > * > li:hover::marker { */
/*   content: "○ "; */
/* } */

.icon {
  display: inline-block;
  vertical-align: middle;
  height: 1.382em;
  aspect-ratio: 1;
  background-size: cover;
}

.icon-circle {
  background: var(--color-fg);
  mask: var(--circle) center center / 100% auto no-repeat;
  /* background-image: url(circle.svg); */
}

.icon-circle:hover {
  background: var(--color-fg);
  mask: var(--circle-checked) center center / 100% auto no-repeat;
}

.icon-circle-checked {
  background: var(--color-fg);
  mask: var(--circle-checked) center center / 100% auto no-repeat;
}

.icon-circle-checked:hover {
  background: var(--color-fg);
  mask: var(--circle) center center / 100% auto no-repeat;
}

.icon-circle-plus {
  background: var(--color-fg);
  mask: var(--circle-plus) center center / 100% auto no-repeat;
}

.icon-circle-question {
  background: var(--color-fg);
  mask: var(--circle-question) center center / 100% auto no-repeat;
}

.tasks__todo > li:not(:last-child) {
  margin-bottom: var(--vspace--1);
}

.tasks__done {
  opacity: 0.5;
}

.tasks__add-task > li:not(:last-child) {
  margin-bottom: var(--vspace--1);
  margin-top: var(--vspace--1);
}

/* .column { */
/*   display: grid; */
/*   grid-template-columns: repeat(2, minmax(auto, 1fr)); */
/* } */

.overlay {
  /* cover whole page */
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: var(--color-bg);
  z-index: 1;
  pointer-events: none;
  view-transition-name: overlay;
}

.spinner {
  display: block;
  margin: auto;
  margin-top: calc(2 * var(--vspace-0));
  view-transition-name: spinner;
}

.htmx-indicator {
  opacity: 0;
  transition: opacity 500ms ease-in;
}

.htmx-request .htmx-indicator {
  opacity: 1;
}

.htmx-request.htmx-indicator {
  opacity: 1;
}

.sticky-top {
  /* use together with .top or .bottom */
  position: sticky;
  top: 0;
  background: var(--color-bg);
  padding-top: var(--vspace--1);
  padding-bottom: var(--vspace--2);
}

.sticky-bottom {
  /* use together with .top or .bottom */
  position: sticky;
  bottom: 0;
  background: var(--color-bg);
  padding-top: var(--vspace--1);
  padding-bottom: var(--vspace--1);
}

/* lists table */

.lists > tbody > tr {
  &:hover {
    cursor: pointer;
  }

  &:active {
    /* give row a "pressed" feel */
    transform: scale(0.975);
    border-color: var(--color-primary);
  }
}

.lists > :is(thead, tbody) > tr > :is(th, td) {
  overflow: hidden;
  text-overflow: ellipsis;
  padding-bottom: var(--vspace--2);

  &:first-child {
    padding-top: var(--vspace--2);
  }
}

.col-two > :is(thead, tbody) > tr > :is(th, td):nth-child(2) {
  text-align: right;
}
.col-two > :is(thead, tbody) > tr > :is(th, td):nth-child(1) {
  text-align: left;
}

.ellipsis {
  opacity: 0.75;
  max-width: calc(var(--vspace-3) * 2);
  /* max-width: calc(var(--max-width)/2); */
  white-space: nowrap;
  /* keeps the text in a single line */
  text-overflow: ellipsis;
  /* enables ellipsis */
  overflow: hidden;
  /* keeps the element from overflowing its parent */
}
